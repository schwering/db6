RATIONALE DB.Locks.Semaphores

Semaphores basically consist of an integer which is decremented with each
lock and incremented with each unlock operation. If the counter is zero, lock
operations are blocking.

The semaphores presented here are a little more sophisticated: They provide
a ticket mechanism, three different lock operations and a ticket can be graded
up or down.

The ticket mechanism consists of two procedures Acquire_Ticket and
Release_Ticket.
There is a count of tickets that maximally can be granted to clients. This
number is currently 8, which keeps the arrays used for managing the tickets
small.
Each ticket is associated with the number of permits it owns.

The number of permits is increased using one of the lock operations, Read_Lock,
Write_Lock, Certify_Lock. Read_Lock waits for a single permit, Write_Lock for 
a real majority and Certify_Lock for all permits (i.e. the initial value of the
semaphore's integer).
Thus, if Write_Lock is granted to some ticket, no other ticket can acquire
a Write_Lock, but Read_Locks are still given. If a Certify_Lock is given to
some ticket, no ticket can acquire a lock of any type.
If the semaphore integer would be zero or less after decrementing, the lock
operation blocks.
This initial value leads to a certain degree of concurrency. Currently, this
is 8 for no special reason.

Tickets can be graded up or down by simply invoking another lock operation.
For example, if a ticket T holds a read-lock, and then Write_Lock(T) is called,
T holds exactly one write-lock after Write_Lock has returned.

